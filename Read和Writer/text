ava中的字符是Unicode编码的，
 InputStream和OutputStream都是用来处理字节的，
 在处理字符时需要用getBytes()转换成字节，这就需要编写字节、字符之间的转换代码
java中提供了单独的类对IO设备进行字符输入与输出

Reader和Writer是所有字符流类的的抽象基类
，用于简化对字符串的输入输出编程，即用于读写文本数据

二进制文件和文本文件的区别
如果一个文件专用于存储文本字符，
而又没有包含文本之外的字符，就可称之为文本文件。
除此之外的文件就是二进制文件
Reader和Writer两个类主要用于操作文本数据的内容，
而InputStream和OutputStream主要操作二进制格式的内容

FileInputStream.write(byte [] buf)写入字节数组，会自动调用flush方法
FileInputStream.write(byte b)写入单个字节，此方法不调用flush()方法

FileWriter.write(char [] cbuf)写入字符数组，不会自动调用flush方法

使用FileWriter写入字符数据比FileOutputStream要简便很多，
但是FileReader并不比FileInputStream读取字符数据要简便多少，
都是要先读取到一个字符数组或者字节数组中，然后把数组转换成字符串。







字节流与字符流的区别
字节流和字符流使用是非常相似的，那么除了操作代码的不同之外，还有哪些不同呢？
字节流在操作的时候本身是不会用到缓冲区（内存）的，是与文件本身直接操作的，而字符流在操作的时候是使用到缓冲区的
字节流在操作文件时，即使不关闭资源（close方法），文件也能输出，但是如果字符流不使用close方法的话，则不会输出任何内容，说明字符流用的是缓冲区，并且可以使用flush方法强制进行刷新缓冲区，这时才能在不close的情况下输出内容

那开发中究竟用字节流好还是用字符流好呢？
在所有的硬盘上保存文件或进行传输的时候都是以字节的方法进行的，包括图片也是按字节完成，而字符是只有在内存中才会形成的，所以使用字节的操作是最多的。

如果要java程序实现一个拷贝功能，应该选用字节流进行操作（可能拷贝的是图片），并且采用边读边写的方式（节省内存）。